name: CI
on:
  pull_request:
    branches:
      - main

jobs:
  comment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install dependencies
        run: |
          yarn install  --frozen-lockfile
      - name: Set SHAs
        uses: nrwl/nx-set-shas@v2
      - name: Print affected
        run: |
          node node_modules/.bin/nx print-affected --plain --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }} > affected.json
      - name: Create or update comment
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const affected = require('./affected.json')

            const title =  '**Affected dep-graph**'
            // let output = cp.execSync('npx nx print-affected --plain').toString()
            // let json = JSON.parse(output)

            let body = '```mermaid\ngraph TD;\n  classDef affected fill:#f00;'

            affected.projects.forEach((name) => {
              body += `  ${name}\n`
              affected.projectGraph.dependencies[name].forEach((dep) => {
                if (affected.projects.includes(dep.target)) {
                  if (dep.type === 'implicit')  {
                    body += `  ${name} -. implicit .-> ${dep.target}\n`
                  } else {
                    body += `  ${name} --> ${dep.target}\n`
                  }
                }
              })
            })

            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            })

            const comment = comments.data.find(x => x.body.includes(title))

            if (comment) {
              await github.rest.issues.updateComment({
                issue_number: context.issue.number,
                comment_id: comment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `${title}\n\n${body}`
              })
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `${title}\n\n${body}`
              })
            }
      
